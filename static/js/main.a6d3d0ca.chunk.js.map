{"version":3,"sources":["logic/game.tsx","store/state.tsx","store/actions.tsx","components/AuctionVIew.tsx","components/SetupView.tsx","components/MainView.tsx","App.tsx","serviceWorker.ts","store/reducer.tsx","store/store.tsx","index.tsx"],"names":["generatePoints","max","sum","rounds","result","Array","from","length","i","Math","min","ind","floor","random","generatePlayers","options","numPlayers","balance","startingBalance","currentPoints","bidInput","allPoints","maxPointsPerRound","sumPoints","numRounds","generatePlayer","generateGame","round","maxRounds","bids","auctionType","finishedRound","validPositiveInt","s","parseInt","isNaN","parseFloat","invalidBid","input","fee","bestBid","newBid","getFee","AuctionType","BiddingFee","View","auctionTypes","Object","keys","initialOptions","English","initialOptionInputs","toString","playerIcons","faSleigh","faGift","faCandyCane","faSnowflake","faBell","faSnowman","faMitten","faTree","faStar","faHollyBerry","faFish","faCookieBite","initialState","optionInputs","players","game","view","SetupView","startNewAuction","createAction","startNewRound","finishRound","placeBid","changeBidInput","switchViewSetup","switchViewAuction","changeSetupField","changeSetupAuction","AuctionView","connect","state","dispatch","newRound","bid","t","backToSetup","props","Container","style","marginLeft","marginRight","Row","Table","striped","bordered","map","p","key","icon","size","backgroundColor","b","type","maxWidth","value","onChange","e","playerId","newInput","target","Button","variant","onClick","disabled","switchViewToAuction","newAuction","field","DropdownButton","id","title","onSelect","Dropdown","Item","eventKey","active","MainView","App","Boolean","window","location","hostname","match","appReducer","createReducer","toBeDeducted","Senior","_","best","best2","AllPay","indexOf","newPlayers","player","includes","winner","x","reduce","r","a","stateFinishRound","action","payload","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6d3d0ca.chunk.js","sourcesContent":["import {\n  Options,\n  AuctionType,\n  Player,\n  Game,\n  State,\n  OptionInputs\n} from '../store/state';\n\nexport function generatePoints(\n  max: number,\n  sum: number,\n  rounds: number\n): number[] {\n  const result = Array.from({ length: rounds }, () => 0);\n  for (let i = 0; i < Math.min(sum, max * rounds); i++) {\n    const ind = Math.floor(Math.random() * rounds);\n    if (result[ind] < max && result[ind] + 1 <= max) {\n      result[ind] += 1;\n    }\n  }\n  return result;\n}\n\nexport function generatePlayer(options: Options): Player {\n  return {\n    balance: options.startingBalance,\n    currentPoints: 0,\n    bidInput: '',\n    allPoints: generatePoints(\n      options.maxPointsPerRound,\n      options.sumPoints,\n      options.numRounds\n    )\n  };\n}\n\nexport function generatePlayers(options: Options): Player[] {\n  return Array.from({ length: options.numPlayers }, () =>\n    generatePlayer(options)\n  );\n}\n\nexport function generateGame(options: Options): Game {\n  return {\n    round: 0,\n    maxRounds: options.numRounds,\n    bids: Array.from({ length: options.numPlayers }, () => 0),\n    auctionType: options.auctionType,\n    finishedRound: false\n  };\n}\n\nexport function stateNewRound(game: Game): Game {\n  return {\n    ...game,\n    round: game.round + 1,\n    bids: Array.from({ length: game.bids.length }, () => 0),\n    finishedRound: false\n  };\n}\n\nexport function stateFinishRound(state: State): State {\n  let toBeDeducted: number[];\n  switch (state.game.auctionType) {\n    case AuctionType.Senior:\n      if (state.players.length <= 2) {\n        toBeDeducted = state.game.bids.map((_, i) => i);\n        break;\n      }\n      let best = [-1, -1];\n      let best2 = [-1, -1];\n      for (let i = 0; i < state.players.length; i++) {\n        const bid = state.game.bids[i];\n        if (bid > best[0]) {\n          best2 = best;\n          best = [bid, i];\n        } else if (bid > best2[0]) {\n          best2 = [bid, i];\n        }\n      }\n      toBeDeducted = [best[1], best2[1]];\n      break;\n    case AuctionType.AllPay:\n      toBeDeducted = state.game.bids.map((_, i) => i);\n      break;\n    default:\n      toBeDeducted = [state.game.bids.indexOf(Math.max(...state.game.bids))];\n      break;\n  }\n  const newPlayers = state.players.map((player, i) => {\n    if (toBeDeducted.includes(i)) {\n      return {\n        ...player,\n        balance: player.balance - state.game.bids[i]\n      };\n    } else {\n      return player;\n    }\n  });\n  const winner = argMax(state.game.bids);\n  return {\n    ...state,\n    players: newPlayers.map((p, i) =>\n      i === winner\n        ? {\n            ...p,\n            currentPoints: p.currentPoints + p.allPoints[state.game.round]\n          }\n        : p\n    ),\n    game: { ...state.game, finishedRound: true }\n  };\n}\n\nexport function isInt(s: string): boolean {\n  return parseInt(s) === parseFloat(s) || isNaN(parseInt(s));\n}\n\nexport function validPositiveInt(s: string): boolean {\n  const i = parseInt(s);\n  return !isNaN(i) && i === parseFloat(s) && i > 0;\n}\n\nexport function invalidBid(\n  input: string,\n  balance: number,\n  fee: number,\n  bestBid: number\n) {\n  const newBid = parseInt(input);\n  if (isNaN(newBid)) {\n    return true; // empty input string\n  } else if (newBid !== parseFloat(input)) {\n    return true; // non-integer input\n  } else if (newBid <= bestBid) {\n    return true; // new bid has to be higher than the best so far\n  } else {\n    return balance - newBid - fee < 0;\n  }\n}\n\nexport function getFee(auctionType: AuctionType) {\n  return auctionType === AuctionType.BiddingFee ? 1 : 0;\n}\n\nfunction argMax(array: number[]) {\n  return array.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];\n}\n\nexport function isDone(game: Game) {\n  return game.round + 1 === game.maxRounds;\n}\n\nexport function optionInputsToOptions(optionInputs: OptionInputs): Options {\n  return {\n    maxPointsPerRound: parseInt(optionInputs.maxPointsPerRound),\n    numRounds: parseInt(optionInputs.numRounds),\n    numPlayers: parseInt(optionInputs.numPlayers),\n    sumPoints: parseInt(optionInputs.sumPoints),\n    startingBalance: parseInt(optionInputs.startingBalance),\n    auctionType: optionInputs.auctionType\n  };\n}\n\nexport function validateOptionInputs(optionInputs: OptionInputs): boolean {\n  return (\n    validPositiveInt(optionInputs.maxPointsPerRound) &&\n    validPositiveInt(optionInputs.numPlayers) &&\n    validPositiveInt(optionInputs.numRounds) &&\n    validPositiveInt(optionInputs.startingBalance) &&\n    validPositiveInt(optionInputs.sumPoints)\n  );\n}\n","import { generatePlayers, generateGame } from '../logic/game';\nimport {\n  faSleigh,\n  faGift,\n  faCandyCane,\n  faTree,\n  faHollyBerry,\n  faFish,\n  faBell,\n  faStar,\n  faMitten,\n  faSnowman,\n  faSnowflake,\n  faCookieBite\n} from '@fortawesome/free-solid-svg-icons';\n\nexport type Player = {\n  balance: number;\n  currentPoints: number;\n  bidInput: string;\n  allPoints: number[];\n};\n\nexport enum View {\n  AuctionView,\n  SetupView\n}\n\nexport enum AuctionType {\n  English = 'English',\n  Dutch = 'Dutch',\n  Vickrey = 'Vickrey',\n  AllPay = 'All pay',\n  BiddingFee = 'Bidding Fee',\n  Senior = 'Senior'\n}\n\nexport const auctionTypes = Object.keys(AuctionType);\n\nexport type Options = {\n  numPlayers: number;\n  maxPointsPerRound: number;\n  numRounds: number;\n  sumPoints: number;\n  startingBalance: number;\n  auctionType: AuctionType;\n};\n\nexport type OptionInputs = {\n  numPlayers: string;\n  maxPointsPerRound: string;\n  numRounds: string;\n  sumPoints: string;\n  startingBalance: string;\n  auctionType: AuctionType;\n};\n\nexport type Game = {\n  round: number;\n  maxRounds: number;\n  bids: number[];\n  auctionType: AuctionType;\n  finishedRound: boolean;\n};\n\nexport type State = {\n  view: View;\n  game: Game;\n  options: Options;\n  optionInputs: OptionInputs;\n  players: Player[];\n};\n\nexport const initialOptions: Options = {\n  numPlayers: 10,\n  maxPointsPerRound: 10,\n  numRounds: 15,\n  sumPoints: 75,\n  startingBalance: 100,\n  auctionType: AuctionType.English\n};\n\nexport const initialOptionInputs: OptionInputs = {\n  numPlayers: initialOptions.numPlayers.toString(),\n  maxPointsPerRound: initialOptions.maxPointsPerRound.toString(),\n  numRounds: initialOptions.numRounds.toString(),\n  sumPoints: initialOptions.sumPoints.toString(),\n  startingBalance: initialOptions.startingBalance.toString(),\n  auctionType: initialOptions.auctionType\n};\n\nexport const playerIcons = [\n  faSleigh,\n  faGift,\n  faCandyCane,\n  faSnowflake,\n  faBell,\n  faSnowman,\n  faMitten,\n  faTree,\n  faStar,\n  faHollyBerry,\n  faFish,\n  faCookieBite\n];\n\nexport const initialState: State = {\n  options: initialOptions,\n  optionInputs: initialOptionInputs,\n  players: generatePlayers(initialOptions),\n  game: generateGame(initialOptions),\n  view: View.SetupView\n};\n","import { createAction } from 'typesafe-actions';\nimport { OptionInputs } from './state';\n\nexport const START_NEW_AUCTION = 'START_NEW_AUCTION';\nexport const START_NEW_ROUND = 'START_NEW_ROUND';\nexport const FINISH_ROUND = 'FINISH_ROUND';\nexport const PLACE_BID = 'PLACE_BID';\nexport const CHANGE_BID_INPUT = 'CHANGE_BID_INPUT';\nexport const SWITCH_VIEW_SETUP = 'SWITCH_VIEW_SETUP';\nexport const SWITCH_VIEW_AUCTION = 'SWITCH_VIEW_AUCTION';\nexport const CHANGE_SETUP_FIELD = 'CHANGE_SETUP_FIELD';\nexport const CHANGE_SETUP_AUCTION = 'CHANGE_SETUP_AUCTION';\n\nexport const startNewAuction = createAction(START_NEW_AUCTION)();\nexport const startNewRound = createAction(START_NEW_ROUND)();\nexport const finishRound = createAction(FINISH_ROUND)();\nexport const placeBid = createAction(PLACE_BID)<{\n  playerId: number;\n  bid: number;\n}>();\nexport const changeBidInput = createAction(CHANGE_BID_INPUT)<{\n  newInput: string;\n  playerId: number;\n}>();\nexport const switchViewSetup = createAction(SWITCH_VIEW_SETUP)();\nexport const switchViewAuction = createAction(SWITCH_VIEW_AUCTION)();\nexport const changeSetupField = createAction(CHANGE_SETUP_FIELD)<{\n  field: keyof OptionInputs;\n  value: string;\n}>();\nexport const changeSetupAuction = createAction(CHANGE_SETUP_AUCTION)<number>();\n","import React, { Dispatch } from 'react';\nimport { State, playerIcons } from '../store/state';\nimport { RootAction } from '../store/reducer';\nimport Container from 'react-bootstrap/Container';\nimport { connect } from 'react-redux';\nimport {\n  finishRound,\n  startNewRound,\n  placeBid,\n  changeBidInput,\n  switchViewSetup\n} from '../store/actions';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport { invalidBid, getFee, isDone } from '../logic/game';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = (state: State) => ({ state });\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  finishRound: () => dispatch(finishRound()),\n  newRound: () => dispatch(startNewRound()),\n  placeBid: (bid: { bid: number; playerId: number }) => dispatch(placeBid(bid)),\n  changeBidInput: (t: { newInput: string; playerId: number }) =>\n    dispatch(changeBidInput(t)),\n  backToSetup: () => dispatch(switchViewSetup())\n});\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst _AuctionView: React.FC<Props> = props => {\n  return (\n    <Container style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n      <h1>{props.state.game.auctionType} auction</h1>\n      <Row>\n        <Table striped bordered>\n          <thead>\n            <tr>\n              <th>\n                Round {props.state.game.round + 1} /{' '}\n                {props.state.options.numRounds}\n              </th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  <FontAwesomeIcon icon={playerIcons[i]} size=\"3x\" />\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>Balances</th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>{p.balance}</th>\n              ))}\n            </tr>\n            <tr>\n              <th style={{ backgroundColor: 'PaleGreen' }}>Total points</th>\n              {props.state.players.map((p, i) => (\n                <th key={i} style={{ backgroundColor: 'PaleGreen' }}>\n                  {p.currentPoints}\n                </th>\n              ))}\n            </tr>\n            <tr>\n              <th>Points to score</th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>{p.allPoints[props.state.game.round]}</th>\n              ))}\n            </tr>\n            <tr>\n              <th>Current bids</th>\n              {props.state.game.bids.map((b, i) => (\n                <th key={i}>{b}</th>\n              ))}\n            </tr>\n            <tr>\n              <th>New Bid</th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  <div>\n                    <input\n                      type=\"number\"\n                      style={{ maxWidth: '57px' }}\n                      value={p.bidInput}\n                      onChange={e =>\n                        props.changeBidInput({\n                          playerId: i,\n                          newInput: props.state.game.finishedRound\n                            ? ''\n                            : e.target.value\n                        })\n                      }\n                    />\n                  </div>\n                </th>\n              ))}\n            </tr>\n            <tr>\n              <th>\n                {props.state.game.finishedRound ? (\n                  <Button\n                    variant=\"success\"\n                    onClick={props.newRound}\n                    disabled={isDone(props.state.game)}\n                  >\n                    Next Round\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"danger\"\n                    disabled={Math.max(...props.state.game.bids) === 0}\n                    onClick={() => props.finishRound()}\n                  >\n                    Finish!\n                  </Button>\n                )}\n              </th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  <Button\n                    disabled={invalidBid(\n                      p.bidInput,\n                      p.balance,\n                      getFee(props.state.game.auctionType),\n                      Math.max(...props.state.game.bids)\n                    )}\n                    onClick={() =>\n                      props.placeBid({ playerId: i, bid: parseInt(p.bidInput) })\n                    }\n                  >\n                    BID!\n                  </Button>\n                </th>\n              ))}\n            </tr>\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Button variant=\"info\" onClick={props.backToSetup}>\n          Back to setup\n        </Button>\n      </Row>\n    </Container>\n  );\n};\n\nexport const AuctionView = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(_AuctionView);\n","import { State, OptionInputs, auctionTypes } from '../store/state';\nimport { Dispatch } from 'react';\nimport { RootAction } from '../store/reducer';\nimport {\n  changeSetupField,\n  switchViewAuction,\n  changeSetupAuction,\n  startNewAuction\n} from '../store/actions';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { validateOptionInputs } from '../logic/game';\n\nconst mapStateToProps = (state: State) => ({ state });\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  changeSetupField: (t: { field: keyof OptionInputs; value: string }) =>\n    dispatch(changeSetupField(t)),\n  switchViewToAuction: () => dispatch(switchViewAuction()),\n  changeSetupAuction: (i: number) => dispatch(changeSetupAuction(i)),\n  newAuction: () => dispatch(startNewAuction())\n});\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst _SetupView: React.FC<Props> = props => {\n  return (\n    <Container>\n      <Table>\n        <thead>\n          <tr>\n            <th>Attribute</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>Number of Players</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.numPlayers}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'numPlayers',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Number of Rounds</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.numRounds}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'numRounds',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Max Points per Round</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.maxPointsPerRound}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'maxPointsPerRound',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Total Points</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.sumPoints}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'sumPoints',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Starting Balance</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.startingBalance}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'startingBalance',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Auction Type</th>\n            <th>\n              <DropdownButton\n                id=\"auction-type-selector\"\n                title={props.state.optionInputs.auctionType}\n                onSelect={(e: string) => props.changeSetupAuction(parseInt(e))}\n              >\n                {auctionTypes.map((t, i) => (\n                  <Dropdown.Item\n                    eventKey={i.toString()}\n                    active={t === props.state.optionInputs.auctionType}\n                    key={i}\n                  >\n                    {t}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n            </th>\n          </tr>\n        </tbody>\n      </Table>\n      <Row>\n        <Button\n          variant=\"success\"\n          disabled={!validateOptionInputs(props.state.optionInputs)}\n          onClick={props.newAuction}\n        >\n          New Auction\n        </Button>\n        <Button variant=\"info\" onClick={props.switchViewToAuction}>\n          Back to Auction\n        </Button>\n      </Row>\n    </Container>\n  );\n};\n\nexport const SetupView = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(_SetupView);\n","import React from 'react';\nimport { View, State } from '../store/state';\nimport { connect } from 'react-redux';\nimport { AuctionView } from './AuctionVIew';\nimport { SetupView } from './SetupView';\n\nconst mapStateToProps = (state: State) => ({\n  view: state.view\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst _MainView: React.FC<Props> = ({ view }) => {\n  switch (view) {\n    case View.SetupView:\n      return <SetupView />;\n    case View.AuctionView:\n      return <AuctionView />;\n  }\n};\n\nexport const MainView = connect(mapStateToProps)(_MainView);\n","import React from 'react';\nimport { MainView } from './components/MainView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App: React.FC = () => {\n  return <MainView />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createReducer, ActionType } from 'typesafe-actions';\nimport { initialState, State, View, auctionTypes, AuctionType } from './state';\nimport * as actions from './actions';\nimport {\n  generatePlayers,\n  generateGame,\n  stateNewRound,\n  stateFinishRound,\n  getFee,\n  isInt,\n  optionInputsToOptions\n} from '../logic/game';\n\nexport type RootAction = ActionType<typeof actions>;\n\nexport const appReducer = createReducer<State, RootAction>(initialState, {\n  [actions.START_NEW_AUCTION]: state => {\n    const options = optionInputsToOptions(state.optionInputs);\n    return {\n      options,\n      players: generatePlayers(options),\n      game: generateGame(options),\n      optionInputs: state.optionInputs,\n      view: View.AuctionView\n    };\n  },\n  [actions.START_NEW_ROUND]: state => ({\n    ...state,\n    game: stateNewRound(state.game)\n  }),\n  [actions.FINISH_ROUND]: state => stateFinishRound(state),\n  [actions.PLACE_BID]: (state, action) => {\n    return {\n      ...state,\n      game: {\n        ...state.game,\n        bids: state.game.bids.map((bid, i) =>\n          i === action.payload.playerId ? action.payload.bid : bid\n        )\n      },\n      players: state.players.map((p, i) =>\n        i !== action.payload.playerId\n          ? p\n          : {\n              ...p,\n              bidInput: '',\n              balance: p.balance - getFee(state.game.auctionType)\n            }\n      )\n    };\n  },\n  [actions.CHANGE_BID_INPUT]: (state, action) => {\n    return {\n      ...state,\n      players: state.players.map((p, i) =>\n        i !== action.payload.playerId\n          ? p\n          : { ...p, bidInput: action.payload.newInput }\n      )\n    };\n  },\n  [actions.SWITCH_VIEW_AUCTION]: state => ({\n    ...state,\n    view: View.AuctionView\n  }),\n  [actions.SWITCH_VIEW_SETUP]: state => ({\n    ...state,\n    view: View.SetupView\n  }),\n  [actions.CHANGE_SETUP_FIELD]: (state, action) => ({\n    ...state,\n    optionInputs: {\n      ...state.optionInputs,\n      [action.payload.field]: isInt(action.payload.value)\n        ? action.payload.value\n        : state.optionInputs[action.payload.field]\n    }\n  }),\n  [actions.CHANGE_SETUP_AUCTION]: (state, action) => ({\n    ...state,\n    optionInputs: {\n      ...state.optionInputs,\n      auctionType: auctionTypes[action.payload] as AuctionType\n    }\n  })\n});\n","import { createStore } from 'redux';\nimport { appReducer } from './reducer';\nimport { initialState } from './state';\n\nexport const store = createStore(appReducer, initialState);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}