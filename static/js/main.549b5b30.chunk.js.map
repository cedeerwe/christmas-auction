{"version":3,"sources":["logic/game.tsx","store/state.tsx","store/actions.tsx","components/AuctionVIew.tsx","components/SetupView.tsx","components/MainView.tsx","App.tsx","serviceWorker.ts","store/reducer.tsx","store/store.tsx","index.tsx"],"names":["generatePoints","max","sum","rounds","result","Array","from","length","i","Math","min","ind","floor","random","generatePlayers","options","numPlayers","balance","startingBalance","currentPoints","bidInput","allPoints","maxPointsPerRound","sumPoints","numRounds","hiddenPoints","generatePlayer","generateGame","round","maxRounds","bids","auctionType","finishedRound","findTwoBest","first","playerId","bid","second","isInt","s","parseInt","parseFloat","isNaN","validPositiveInt","invalidBid","input","fee","bestBid","newBid","getFee","AuctionType","BiddingFee","argMax","array","map","x","reduce","r","a","isDone","game","winnerHasPoints","state","winner","validNonNegativeInt","players","View","auctionTypes","Object","keys","initialOptions","English","showPoints","initialOptionInputs","toString","playerIcons","faSleigh","faGift","faCandyCane","faSnowflake","faBell","faSnowman","faMitten","faTree","faStar","faHollyBerry","faFish","faCookieBite","initialState","optionInputs","view","SetupView","startNewAuction","createAction","startNewRound","finishRound","placeBid","changeBidInput","switchViewSetup","switchViewAuction","changeSetupField","changeSetupAuction","changeSetupShowPoints","changeHiddenPoints","AuctionView","connect","dispatch","newRound","t","backToSetup","props","Container","style","marginLeft","marginRight","Row","Table","striped","bordered","p","key","icon","size","backgroundColor","type","maxWidth","value","onChange","e","newPoints","target","b","newInput","Button","variant","onClick","disabled","className","switchViewToAuction","newAuction","checked","field","DropdownButton","id","title","onSelect","Dropdown","Item","eventKey","active","MainView","App","left","right","width","height","backgroundImage","backgroundBlendMode","opacity","Boolean","window","location","hostname","match","appReducer","createReducer","toBeDeducted","Senior","twoBest","Vickrey","bestTwo","AllPay","maxValue","indexOf","deductionIds","newPlayers","player","includes","filter","stateFinishRound","action","payload","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.549b5b30.chunk.js","sourcesContent":["import {\n  Options,\n  AuctionType,\n  Player,\n  Game,\n  State,\n  OptionInputs\n} from '../store/state';\n\nexport function generatePoints(\n  max: number,\n  sum: number,\n  rounds: number\n): number[] {\n  const result = Array.from({ length: rounds }, () => 0);\n  for (let i = 0; i < Math.min(sum, max * rounds); i++) {\n    const ind = Math.floor(Math.random() * rounds);\n    if (result[ind] < max && result[ind] + 1 <= max) {\n      result[ind] += 1;\n    }\n  }\n  return result;\n}\n\nexport function generatePlayer(options: Options): Player {\n  return {\n    balance: options.startingBalance,\n    currentPoints: 0,\n    bidInput: '',\n    allPoints: generatePoints(\n      options.maxPointsPerRound,\n      options.sumPoints,\n      options.numRounds\n    ),\n    hiddenPoints: ''\n  };\n}\n\nexport function generatePlayers(options: Options): Player[] {\n  return Array.from({ length: options.numPlayers }, () =>\n    generatePlayer(options)\n  );\n}\n\nexport function generateGame(options: Options): Game {\n  return {\n    round: 0,\n    maxRounds: options.numRounds,\n    bids: Array.from({ length: options.numPlayers }, () => 0),\n    auctionType: options.auctionType,\n    finishedRound: false\n  };\n}\n\nexport function stateNewRound(game: Game): Game {\n  return {\n    ...game,\n    round: game.round + 1,\n    bids: Array.from({ length: game.bids.length }, () => 0),\n    finishedRound: false\n  };\n}\n\nexport function findTwoBest(\n  bids: number[]\n): {\n  first: { playerId: number; bid: number };\n  second: { playerId: number; bid: number };\n} {\n  const result = {\n    first: { playerId: -1, bid: -1 },\n    second: { playerId: -1, bid: -1 }\n  };\n  for (let i = 0; i < bids.length; i++) {\n    const bid = bids[i];\n    if (bid > result.first.bid) {\n      result.second = result.first;\n      result.first = { playerId: i, bid };\n    } else if (bid > result.second.bid) {\n      result.second = { bid, playerId: i };\n    }\n  }\n  return result;\n}\n\nexport function stateFinishRound(state: State): State {\n  let toBeDeducted: Array<{ playerId: number; bid: number }>;\n  switch (state.game.auctionType) {\n    case AuctionType.Senior:\n      if (state.players.length <= 2) {\n        toBeDeducted = state.game.bids.map((bid, i) => ({ playerId: i, bid }));\n        break;\n      }\n      const twoBest = findTwoBest(state.game.bids);\n      toBeDeducted = [twoBest.first, twoBest.second];\n      break;\n    case AuctionType.Vickrey:\n      if (state.players.length === 1) {\n        toBeDeducted = [{ playerId: 0, bid: state.game.bids[0] }];\n      }\n      const bestTwo = findTwoBest(state.game.bids);\n      toBeDeducted = [\n        { playerId: bestTwo.first.playerId, bid: bestTwo.second.bid }\n      ];\n      break;\n    case AuctionType.AllPay:\n      toBeDeducted = state.game.bids.map((bid, i) => ({ playerId: i, bid }));\n      break;\n    default:\n      const maxValue = Math.max(...state.game.bids);\n      toBeDeducted = [\n        { playerId: state.game.bids.indexOf(maxValue), bid: maxValue }\n      ];\n      break;\n  }\n  const deductionIds = toBeDeducted.map(t => t.playerId);\n  const newPlayers = state.players.map((player, i) => {\n    if (deductionIds.includes(i)) {\n      return {\n        ...player,\n        balance:\n          player.balance - toBeDeducted.filter(t => i === t.playerId)[0].bid\n      };\n    } else {\n      return player;\n    }\n  });\n  const winner = argMax(state.game.bids);\n  return {\n    ...state,\n    players: newPlayers.map((p, i) =>\n      i === winner\n        ? {\n            ...p,\n            currentPoints:\n              p.currentPoints +\n              (state.options.showPoints\n                ? p.allPoints[state.game.round]\n                : parseInt(p.hiddenPoints))\n          }\n        : p\n    ),\n    game: { ...state.game, finishedRound: true }\n  };\n}\n\nexport function isInt(s: string): boolean {\n  return parseInt(s) === parseFloat(s) || isNaN(parseInt(s));\n}\n\nexport function validPositiveInt(s: string): boolean {\n  const i = parseInt(s);\n  return !isNaN(i) && i === parseFloat(s) && i > 0;\n}\n\nexport function validNonNegativeInt(s: string): boolean {\n  const i = parseInt(s);\n  return !isNaN(i) && i === parseFloat(s) && i >= 0;\n}\n\nexport function invalidBid(\n  input: string,\n  balance: number,\n  fee: number,\n  bestBid: number\n) {\n  const newBid = parseInt(input);\n  if (isNaN(newBid)) {\n    return true; // empty input string\n  } else if (newBid !== parseFloat(input)) {\n    return true; // non-integer input\n  } else if (newBid <= bestBid) {\n    return true; // new bid has to be higher than the best so far\n  } else {\n    return balance - newBid - fee < 0;\n  }\n}\n\nexport function getFee(auctionType: AuctionType) {\n  return auctionType === AuctionType.BiddingFee ? 1 : 0;\n}\n\nfunction argMax(array: number[]) {\n  return array.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];\n}\n\nexport function isDone(game: Game) {\n  return game.round + 1 === game.maxRounds;\n}\n\nexport function optionInputsToOptions(optionInputs: OptionInputs): Options {\n  return {\n    maxPointsPerRound: parseInt(optionInputs.maxPointsPerRound),\n    numRounds: parseInt(optionInputs.numRounds),\n    numPlayers: parseInt(optionInputs.numPlayers),\n    sumPoints: parseInt(optionInputs.sumPoints),\n    startingBalance: parseInt(optionInputs.startingBalance),\n    auctionType: optionInputs.auctionType,\n    showPoints: optionInputs.showPoints\n  };\n}\n\nexport function validateOptionInputs(optionInputs: OptionInputs): boolean {\n  return (\n    validPositiveInt(optionInputs.maxPointsPerRound) &&\n    validPositiveInt(optionInputs.numPlayers) &&\n    validPositiveInt(optionInputs.numRounds) &&\n    validPositiveInt(optionInputs.startingBalance) &&\n    validPositiveInt(optionInputs.sumPoints)\n  );\n}\n\nexport function winnerHasPoints(state: State): boolean {\n  const winner = argMax(state.game.bids);\n  return validNonNegativeInt(state.players[winner].hiddenPoints);\n}\n\nexport function canBeFinished(state: State): boolean {\n  return (\n    (state.options.showPoints && Math.max(...state.game.bids) > 0) ||\n    (!state.options.showPoints && winnerHasPoints(state))\n  );\n}\n","import { generatePlayers, generateGame } from '../logic/game';\nimport {\n  faSleigh,\n  faGift,\n  faCandyCane,\n  faTree,\n  faHollyBerry,\n  faFish,\n  faBell,\n  faStar,\n  faMitten,\n  faSnowman,\n  faSnowflake,\n  faCookieBite\n} from '@fortawesome/free-solid-svg-icons';\n\nexport type Player = {\n  balance: number;\n  currentPoints: number;\n  bidInput: string;\n  allPoints: number[];\n  hiddenPoints: string;\n};\n\nexport enum View {\n  AuctionView,\n  SetupView\n}\n\nexport enum AuctionType {\n  English = 'English',\n  Dutch = 'Dutch',\n  Vickrey = 'Vickrey',\n  AllPay = 'AllPay',\n  BiddingFee = 'BiddingFee',\n  Senior = 'Senior'\n}\n\nexport const auctionTypes = Object.keys(AuctionType);\n\nexport type Options = {\n  numPlayers: number;\n  maxPointsPerRound: number;\n  numRounds: number;\n  sumPoints: number;\n  startingBalance: number;\n  auctionType: AuctionType;\n  showPoints: boolean;\n};\n\nexport type OptionInputs = {\n  numPlayers: string;\n  maxPointsPerRound: string;\n  numRounds: string;\n  sumPoints: string;\n  startingBalance: string;\n  auctionType: AuctionType;\n  showPoints: boolean;\n};\n\nexport type Game = {\n  round: number;\n  maxRounds: number;\n  bids: number[];\n  auctionType: AuctionType;\n  finishedRound: boolean;\n};\n\nexport type State = {\n  view: View;\n  game: Game;\n  options: Options;\n  optionInputs: OptionInputs;\n  players: Player[];\n};\n\nexport const initialOptions: Options = {\n  numPlayers: 10,\n  maxPointsPerRound: 10,\n  numRounds: 15,\n  sumPoints: 75,\n  startingBalance: 50,\n  auctionType: AuctionType.English,\n  showPoints: true\n};\n\nexport const initialOptionInputs: OptionInputs = {\n  numPlayers: initialOptions.numPlayers.toString(),\n  maxPointsPerRound: initialOptions.maxPointsPerRound.toString(),\n  numRounds: initialOptions.numRounds.toString(),\n  sumPoints: initialOptions.sumPoints.toString(),\n  startingBalance: initialOptions.startingBalance.toString(),\n  auctionType: initialOptions.auctionType,\n  showPoints: initialOptions.showPoints\n};\n\nexport const playerIcons = [\n  faSleigh,\n  faGift,\n  faCandyCane,\n  faSnowflake,\n  faBell,\n  faSnowman,\n  faMitten,\n  faTree,\n  faStar,\n  faHollyBerry,\n  faFish,\n  faCookieBite\n];\n\nexport const initialState: State = {\n  options: initialOptions,\n  optionInputs: initialOptionInputs,\n  players: generatePlayers(initialOptions),\n  game: generateGame(initialOptions),\n  view: View.SetupView\n};\n","import { createAction } from 'typesafe-actions';\nimport { OptionInputs } from './state';\n\nexport const START_NEW_AUCTION = 'START_NEW_AUCTION';\nexport const START_NEW_ROUND = 'START_NEW_ROUND';\nexport const FINISH_ROUND = 'FINISH_ROUND';\nexport const PLACE_BID = 'PLACE_BID';\nexport const CHANGE_BID_INPUT = 'CHANGE_BID_INPUT';\nexport const SWITCH_VIEW_SETUP = 'SWITCH_VIEW_SETUP';\nexport const SWITCH_VIEW_AUCTION = 'SWITCH_VIEW_AUCTION';\nexport const CHANGE_SETUP_FIELD = 'CHANGE_SETUP_FIELD';\nexport const CHANGE_SETUP_AUCTION = 'CHANGE_SETUP_AUCTION';\nexport const CHANGE_SETUP_SHOW_POINTS = 'CHANGE_SETUP_SHOW_POINTS';\nexport const CHANGE_HIDDEN_POINTS = 'CHANGE_HIDDEN_POINTS';\n\nexport const startNewAuction = createAction(START_NEW_AUCTION)();\nexport const startNewRound = createAction(START_NEW_ROUND)();\nexport const finishRound = createAction(FINISH_ROUND)();\nexport const placeBid = createAction(PLACE_BID)<{\n  playerId: number;\n  bid: number;\n}>();\nexport const changeBidInput = createAction(CHANGE_BID_INPUT)<{\n  newInput: string;\n  playerId: number;\n}>();\nexport const switchViewSetup = createAction(SWITCH_VIEW_SETUP)();\nexport const switchViewAuction = createAction(SWITCH_VIEW_AUCTION)();\nexport const changeSetupField = createAction(CHANGE_SETUP_FIELD)<{\n  field: keyof OptionInputs;\n  value: string;\n}>();\nexport const changeSetupAuction = createAction(CHANGE_SETUP_AUCTION)<number>();\nexport const changeSetupShowPoints = createAction(CHANGE_SETUP_SHOW_POINTS)<\n  boolean\n>();\nexport const changeHiddenPoints = createAction(CHANGE_HIDDEN_POINTS)<{\n  newPoints: string;\n  playerId: number;\n}>();\n","import React, { Dispatch } from 'react';\nimport { State, playerIcons } from '../store/state';\nimport { RootAction } from '../store/reducer';\nimport Container from 'react-bootstrap/Container';\nimport { connect } from 'react-redux';\nimport {\n  finishRound,\n  startNewRound,\n  placeBid,\n  changeBidInput,\n  switchViewSetup,\n  changeHiddenPoints\n} from '../store/actions';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport { invalidBid, getFee, isDone, canBeFinished } from '../logic/game';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = (state: State) => ({ state });\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  finishRound: () => dispatch(finishRound()),\n  newRound: () => dispatch(startNewRound()),\n  placeBid: (bid: { bid: number; playerId: number }) => dispatch(placeBid(bid)),\n  changeBidInput: (t: { newInput: string; playerId: number }) =>\n    dispatch(changeBidInput(t)),\n  backToSetup: () => dispatch(switchViewSetup()),\n  changeHiddenPoints: (t: { newPoints: string; playerId: number }) =>\n    dispatch(changeHiddenPoints(t))\n});\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst _AuctionView: React.FC<Props> = props => {\n  return (\n    <Container style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n      <h1>{props.state.game.auctionType} auction</h1>\n      <Row>\n        <Table striped bordered>\n          <thead>\n            <tr>\n              <th>\n                Round {props.state.game.round + 1} /{' '}\n                {props.state.options.numRounds}\n              </th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  <FontAwesomeIcon icon={playerIcons[i]} size=\"3x\" />\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>Balances</th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>{p.balance}</th>\n              ))}\n            </tr>\n            <tr>\n              <th style={{ backgroundColor: 'PaleGreen' }}>Total points</th>\n              {props.state.players.map((p, i) => (\n                <th key={i} style={{ backgroundColor: 'PaleGreen' }}>\n                  {p.currentPoints}\n                </th>\n              ))}\n            </tr>\n            <tr>\n              <th>Points to score</th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  {props.state.options.showPoints ? (\n                    <span>{p.allPoints[props.state.game.round]}</span>\n                  ) : (\n                    <input\n                      type=\"number\"\n                      style={{ maxWidth: '57px' }}\n                      value={p.hiddenPoints}\n                      onChange={e =>\n                        props.changeHiddenPoints({\n                          playerId: i,\n                          newPoints: e.target.value\n                        })\n                      }\n                    />\n                  )}\n                </th>\n              ))}\n            </tr>\n            <tr>\n              <th>Current bids</th>\n              {props.state.game.bids.map((b, i) => (\n                <th key={i}>{b}</th>\n              ))}\n            </tr>\n            <tr>\n              <th>New Bid</th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  <div>\n                    <input\n                      type=\"number\"\n                      style={{ maxWidth: '57px' }}\n                      value={p.bidInput}\n                      onChange={e =>\n                        props.changeBidInput({\n                          playerId: i,\n                          newInput: props.state.game.finishedRound\n                            ? ''\n                            : e.target.value\n                        })\n                      }\n                    />\n                  </div>\n                </th>\n              ))}\n            </tr>\n            <tr>\n              <th>\n                {props.state.game.finishedRound ? (\n                  <Button\n                    variant=\"success\"\n                    onClick={props.newRound}\n                    disabled={isDone(props.state.game)}\n                  >\n                    Next Round\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"danger\"\n                    disabled={!canBeFinished(props.state)}\n                    onClick={() => props.finishRound()}\n                  >\n                    Finish!\n                  </Button>\n                )}\n              </th>\n              {props.state.players.map((p, i) => (\n                <th key={i}>\n                  <Button\n                    disabled={invalidBid(\n                      p.bidInput,\n                      p.balance,\n                      getFee(props.state.game.auctionType),\n                      Math.max(...props.state.game.bids)\n                    )}\n                    onClick={() =>\n                      props.placeBid({ playerId: i, bid: parseInt(p.bidInput) })\n                    }\n                  >\n                    BID!\n                  </Button>\n                </th>\n              ))}\n            </tr>\n          </tbody>\n        </Table>\n      </Row>\n      <Row className=\"justify-content-between\">\n        <Button\n          variant=\"secondary\"\n          onClick={props.newRound}\n          disabled={isDone(props.state.game)}\n        >\n          Skip round\n        </Button>\n        <Button variant=\"info\" onClick={props.backToSetup}>\n          Back to setup\n        </Button>\n      </Row>\n    </Container>\n  );\n};\n\nexport const AuctionView = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(_AuctionView);\n","import { State, OptionInputs, auctionTypes } from '../store/state';\nimport { Dispatch } from 'react';\nimport { RootAction } from '../store/reducer';\nimport {\n  changeSetupField,\n  switchViewAuction,\n  changeSetupAuction,\n  startNewAuction,\n  changeSetupShowPoints\n} from '../store/actions';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { validateOptionInputs } from '../logic/game';\n\nconst mapStateToProps = (state: State) => ({ state });\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  changeSetupField: (t: { field: keyof OptionInputs; value: string }) =>\n    dispatch(changeSetupField(t)),\n  switchViewToAuction: () => dispatch(switchViewAuction()),\n  changeSetupAuction: (i: number) => dispatch(changeSetupAuction(i)),\n  newAuction: () => dispatch(startNewAuction()),\n  changeSetupShowPoints: (checked: boolean) =>\n    dispatch(changeSetupShowPoints(checked))\n});\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst _SetupView: React.FC<Props> = props => {\n  return (\n    <Container>\n      <Table>\n        <thead>\n          <tr>\n            <th>Attribute</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>Number of Players</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.numPlayers}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'numPlayers',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Number of Rounds</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.numRounds}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'numRounds',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Max Points per Round</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.maxPointsPerRound}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'maxPointsPerRound',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Total Points</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.sumPoints}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'sumPoints',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Starting Balance</th>\n            <th>\n              <input\n                type=\"number\"\n                value={props.state.optionInputs.startingBalance}\n                onChange={e =>\n                  props.changeSetupField({\n                    field: 'startingBalance',\n                    value: e.target.value\n                  })\n                }\n              />\n            </th>\n          </tr>\n          <tr>\n            <th>Auction Type</th>\n            <th>\n              <DropdownButton\n                id=\"auction-type-selector\"\n                title={props.state.optionInputs.auctionType}\n                onSelect={(e: string) => props.changeSetupAuction(parseInt(e))}\n              >\n                {auctionTypes.map((t, i) => (\n                  <Dropdown.Item\n                    eventKey={i.toString()}\n                    active={t === props.state.optionInputs.auctionType}\n                    key={i}\n                  >\n                    {t}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n            </th>\n          </tr>\n          <tr>\n            <th>Show Points</th>\n            <th>\n              <input\n                type=\"checkbox\"\n                checked={props.state.optionInputs.showPoints}\n                onChange={e => props.changeSetupShowPoints(e.target.checked)}\n              />\n            </th>\n          </tr>\n        </tbody>\n      </Table>\n      <hr />\n      <Row className=\"justify-content-between\">\n        <Button\n          variant=\"success\"\n          disabled={!validateOptionInputs(props.state.optionInputs)}\n          onClick={props.newAuction}\n        >\n          New Auction\n        </Button>\n        <Button variant=\"info\" onClick={props.switchViewToAuction}>\n          Back to Auction\n        </Button>\n      </Row>\n    </Container>\n  );\n};\n\nexport const SetupView = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(_SetupView);\n","import React from 'react';\nimport { View, State } from '../store/state';\nimport { connect } from 'react-redux';\nimport { AuctionView } from './AuctionVIew';\nimport { SetupView } from './SetupView';\n\nconst mapStateToProps = (state: State) => ({\n  view: state.view\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst _MainView: React.FC<Props> = ({ view }) => {\n  switch (view) {\n    case View.SetupView:\n      return <SetupView />;\n    case View.AuctionView:\n      return <AuctionView />;\n  }\n};\n\nexport const MainView = connect(mapStateToProps)(_MainView);\n","import React from 'react';\nimport { MainView } from './components/MainView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App: React.FC = () => {\n  return (\n    <div\n      style={{\n        left: 0,\n        right: 0,\n        width: '100%',\n        height: '100vh',\n        backgroundImage: 'url(background.jpg)',\n        backgroundColor: 'hsla(0,0%,100%,0.85)',\n        backgroundBlendMode: 'overlay',\n        opacity: 1\n      }}\n    >\n      <MainView />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createReducer, ActionType } from 'typesafe-actions';\nimport { initialState, State, View, auctionTypes, AuctionType } from './state';\nimport * as actions from './actions';\nimport {\n  generatePlayers,\n  generateGame,\n  stateNewRound,\n  stateFinishRound,\n  getFee,\n  isInt,\n  optionInputsToOptions\n} from '../logic/game';\n\nexport type RootAction = ActionType<typeof actions>;\n\nexport const appReducer = createReducer<State, RootAction>(initialState, {\n  [actions.START_NEW_AUCTION]: state => {\n    const options = optionInputsToOptions(state.optionInputs);\n    return {\n      options,\n      players: generatePlayers(options),\n      game: generateGame(options),\n      optionInputs: state.optionInputs,\n      view: View.AuctionView\n    };\n  },\n  [actions.START_NEW_ROUND]: state => ({\n    ...state,\n    game: stateNewRound(state.game),\n    players: state.players.map(p => ({ ...p, hiddenPoints: '' }))\n  }),\n  [actions.FINISH_ROUND]: state => stateFinishRound(state),\n  [actions.PLACE_BID]: (state, action) => {\n    return {\n      ...state,\n      game: {\n        ...state.game,\n        bids: state.game.bids.map((bid, i) =>\n          i === action.payload.playerId ? action.payload.bid : bid\n        )\n      },\n      players: state.players.map((p, i) =>\n        i !== action.payload.playerId\n          ? p\n          : {\n              ...p,\n              bidInput: '',\n              balance: p.balance - getFee(state.game.auctionType)\n            }\n      )\n    };\n  },\n  [actions.CHANGE_BID_INPUT]: (state, action) => {\n    return {\n      ...state,\n      players: state.players.map((p, i) =>\n        i !== action.payload.playerId\n          ? p\n          : { ...p, bidInput: action.payload.newInput }\n      )\n    };\n  },\n  [actions.SWITCH_VIEW_AUCTION]: state => ({\n    ...state,\n    view: View.AuctionView\n  }),\n  [actions.SWITCH_VIEW_SETUP]: state => ({\n    ...state,\n    view: View.SetupView\n  }),\n  [actions.CHANGE_SETUP_FIELD]: (state, action) => ({\n    ...state,\n    optionInputs: {\n      ...state.optionInputs,\n      [action.payload.field]: isInt(action.payload.value)\n        ? action.payload.value\n        : state.optionInputs[action.payload.field]\n    }\n  }),\n  [actions.CHANGE_SETUP_AUCTION]: (state, action) => ({\n    ...state,\n    optionInputs: {\n      ...state.optionInputs,\n      auctionType: auctionTypes[action.payload] as AuctionType\n    }\n  }),\n  [actions.CHANGE_SETUP_SHOW_POINTS]: (state, action) => ({\n    ...state,\n    optionInputs: {\n      ...state.optionInputs,\n      showPoints: action.payload\n    }\n  }),\n  [actions.CHANGE_HIDDEN_POINTS]: (state, action) => ({\n    ...state,\n    players: state.players.map((p, i) =>\n      i !== action.payload.playerId\n        ? p\n        : {\n            ...p,\n            hiddenPoints: isInt(action.payload.newPoints)\n              ? action.payload.newPoints\n              : p.hiddenPoints\n          }\n    )\n  })\n});\n","import { createStore } from 'redux';\nimport { appReducer } from './reducer';\nimport { initialState } from './state';\n\nexport const store = createStore(appReducer, initialState);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}